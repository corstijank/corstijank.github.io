<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Statics Must Die!</title>
    <link>https://corstijank.github.io/post/index.xml</link>
    <description>Recent content in Posts on Statics Must Die!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</copyright>
    <lastBuildDate>Mon, 16 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://corstijank.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Crossing Styx - My journey into the (under)world of .NET - Part I</title>
      <link>https://corstijank.github.io/post/dotnetcore-jenkins/</link>
      <pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://corstijank.github.io/post/dotnetcore-jenkins/</guid>
      <description>

&lt;p&gt;At the closing of last year, I presented an in-house talk, comparing Continuous Delivery solutions for both Java and .NET. Of course, this was not a simple side-by-side comparison; a microsoft oriented colleague and myself created a small challenge for ourselves. My colleague was going to build Java software in Team Foundation Server. And me? I was stuck creating a delivery pipeline for Microsoft .NET in Jenkins.&lt;/p&gt;

&lt;p&gt;Now, I had been thinking about looking into .NET since the appearance of &lt;strong&gt;.NET core&lt;/strong&gt;, and this gave me all the excuse I needed&amp;hellip;&lt;/p&gt;

&lt;p&gt;So, this is going to be the first in a series of blog posts journalling my adventures in .NET core. For this first post, Im going to be talking mostly on starting up a simple delivery pipeline using Jenkins. From this basic delivery pipeline, other posts in this series will focus on developing the developing the application, with unit tests, acceptance tests, all the while making sure our delivery pipeline stays up to date.&lt;/p&gt;

&lt;p&gt;Well then, let&amp;rsquo;s begin!&lt;/p&gt;

&lt;h2 id=&#34;hello-net-core&#34;&gt;Hello .NET core&lt;/h2&gt;

&lt;p&gt;So first off, we get started with a new .NET core application; using the .NET core runtime and the CLI tooling.&lt;/p&gt;

&lt;asciinema-player src=&#34;https://corstijank.github.io/asciinema/dotnet-new-project.json&#34; cols=&#34;90&#34; rows=&#34;20&#34; preload=&#34;true&#34; poster=&#34;npt:0:07&#34;&gt;&lt;/asciinema-player&gt;


&lt;p&gt;Behold! The glory of &amp;ldquo;Hello World&amp;rdquo; in .NET Core. So, a couple of interesting things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet new&lt;/code&gt; creates a simple, new C# project. Luckily, no VB.NET shenanigans. This basically creates a &lt;code&gt;Program.cs&lt;/code&gt; file and a &lt;code&gt;project.json&lt;/code&gt; file. The JSON file is kind of like your Maven pom file or your Gradle build file. Kind of.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet restore&lt;/code&gt; downloads all dependencies into the local cache, so you&amp;rsquo;re good to go. Interesting fact; you always need to run &lt;code&gt;dotnet restore&lt;/code&gt; separately, it is not included as a part of something like &lt;code&gt;dotnet run&lt;/code&gt; or &lt;code&gt;dotnet publish&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet run&lt;/code&gt; does two things. Our program is not yet compiled, so it implicitly does a build of our program (&lt;code&gt;dotnet build&lt;/code&gt;). Then, it runs the program, resulting in our much desired &amp;lsquo;Hello World&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For now, this is about all I need. I have a &amp;lsquo;Hello World&amp;rsquo; program, I can clone it anywhere, and get it building and running.&lt;/p&gt;

&lt;p&gt;So, coolest thing about this all? It&amp;rsquo;s all native on my Mac. And want to know what&amp;rsquo;s even better? It works just as well on Linux. And just like that, running and distributing our application got a whole lot easier, as I, for one, hail our Docker overlords.&lt;/p&gt;

&lt;h2 id=&#34;on-jenkins-2&#34;&gt;On Jenkins 2&lt;/h2&gt;

&lt;p&gt;Now, as I said, I had extra motivation for my experiments to use Jenkins as a build tool. One, it was the topic of the talk. And of course two, it&amp;rsquo;s just better then TFS or VSTS &lt;em&gt;coughs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ok, well, let&amp;rsquo;s not go into that comparison on here.&lt;/p&gt;

&lt;p&gt;At the very least, Jenkins&amp;rsquo; delivery pipelines are fun to experiment with, and allow us to create a delivery pipeline, as code (as opposed to clicking through a bunch of screens). Last year, while Microsoft was busy developing dotnet core, Cloudbees (the company mostly behind Jenkins) has been busy developing Jenkins 2, and focussing on delivery pipelines.&lt;/p&gt;

&lt;p&gt;Though still in development, the delivery pipeline vision from Jenkins has been clear throughout; All build configuration is scripted, in a file called &lt;code&gt;Jenkinsfile&lt;/code&gt; that you keep in git with your software.&lt;/p&gt;

&lt;p&gt;There are, at this moment, two &amp;lsquo;flavors&amp;rsquo; of Jenkinsfile;
-  a pure groovy script. Allows for maximal freedom, but is error prone, and often not as readable
- a declarative script. Syntax is more defined; less chance for errors at the cost of flexibility. Also, the syntax is not quite final yet (beta2 at this moment of writing)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If your &lt;code&gt;Jenkinsfile&lt;/code&gt; starts with something akin to &lt;code&gt;node{&lt;/code&gt; you&amp;rsquo;re looking at a script that allows all kinds of groovy code. You can do anything, but it&amp;rsquo;s easy to make mistakes. If the file starts with &lt;code&gt;pipeline{&lt;/code&gt; the syntax is much more strictly defined, but more readable. I would advice to use the declarative &lt;code&gt;pipeline{&lt;/code&gt; style for new projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this project, we&amp;rsquo;re going to use the declarative style. In my opinion, it&amp;rsquo;s cleaner, and it certainly looks like it&amp;rsquo;s the direction Cloudbees is heading towards.&lt;/p&gt;

&lt;h2 id=&#34;back-to-the-core-of-things&#34;&gt;Back to the core of things.&lt;/h2&gt;

&lt;p&gt;Now, that&amp;rsquo;s all nice and well, but what about our awesome hello world application? Well, let&amp;rsquo;s get started on a delivery pipeline for that. What&amp;rsquo;s going to be delivery architecture? Our application is going to be packaged into a docker container, and uploaded to docker hub. From there, deployment to production should be easy enough. Let&amp;rsquo;s begin.&lt;/p&gt;

&lt;h3 id=&#34;building-the-code&#34;&gt;Building the code&lt;/h3&gt;

&lt;p&gt;So, I created a first stage called &amp;lsquo;Build Binaries&amp;rsquo; to begin with. It builds our .NET core binaries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;stage(&#39;Build binaries&#39;){
  agent { docker &#39;microsoft/dotnet:latest&#39;}
  steps{
    git url: &#39;https://github.com/corstijank/blog-dotnet-jenkins.git&#39;
    sh &#39;dotnet restore&#39;
    sh &#39;dotnet publish project.json -c Release -r ubuntu.14.04-x64 -o ./publish&#39;
    stash includes: &#39;publish/**&#39;, name: &#39;prod_bins&#39; 
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s start with the line where declare which agent we are going to use for this stage. We use a docker container as our agent, and base it on the &lt;code&gt;microsoft/dotnet:latest&lt;/code&gt; image. This is a simple line, but this has some pretty neat implications. It basically means, for this pipeline to run, we don&amp;rsquo;t need to install the .NET core SDK anywhere. All we need is access to a docker host. The pipeline downloads the image, starts a container, and executes the steps of our stage &lt;em&gt;inside&lt;/em&gt; the container.&lt;/p&gt;

&lt;p&gt;Need to pin a specific version? No problem. Just use a different docker tag. Want to build on a new version of the SDK? Use a different docker tag. Never install a .NET SDK on a build server again. It&amp;rsquo;s &lt;strong&gt;glorious&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, what do we run our container? Basically three things; we clone the git repository, restore the dependencies, and publish our application. This is all pretty basic .NET core CLI stuff.&lt;/p&gt;

&lt;p&gt;Lastly, and this is important, we use &lt;code&gt;stash&lt;/code&gt; to copy the resulting binaries &lt;strong&gt;out&lt;/strong&gt; of our container. This basically creates a zip file of everything in the specified directory, and ensures that zipfile is made available on request to later stages in the pipeline under the specified name.&lt;/p&gt;

&lt;h3 id=&#34;3-2-1-dockerize&#34;&gt;3&amp;hellip;2&amp;hellip;1&amp;hellip;Dockerize!&lt;/h3&gt;

&lt;p&gt;Now that we have our binaries, it&amp;rsquo;s time to create our docker image. I purposefully put this as a separate stage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Simply said, the requirements for the &lt;strong&gt;steps&lt;/strong&gt; in this stage, being, access to a Docker daemon, are different than the requirements for the &lt;strong&gt;steps&lt;/strong&gt;of the previous stage (access to the .NET core sdk). Much like object oriented programming, this is a pretty good pointer to decouple stages in the delivery pipeline.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s look at the pipeline:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;stage(&#39;Create docker image&#39;){
    agent { label &#39;hasDocker&#39; }
    environment {
        DOCKER_ID = credentials(&#39;docker-id&#39;)
    }
    steps{
        // Unstash the binaries from the previous tage
        unstash &#39;prod_bins&#39;
        sh &amp;quot;&amp;quot;&amp;quot;  docker build -t corstijank/blog-dotnet-jenkins:1.0-${env.BUILD_NUMBER} .
                docker tag corstijank/blog-dotnet-jenkins:1.0-${env.BUILD_NUMBER} corstijank/blog-dotnet-jenkins:latest
                docker login -u ${DOCKER_ID_USR} -p ${DOCKER_ID_PSW}
                docker push corstijank/blog-dotnet-jenkins:1.0-${env.BUILD_NUMBER}
                docker push corstijank/blog-dotnet-jenkins:latest &amp;quot;&amp;quot;&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a bunch of new stuff going on here. Let&amp;rsquo;s inspect. We run this stage on any Jenkins agent that has a label called &amp;lsquo;hasDocker&amp;rsquo;. The label is just something I made up; but it&amp;rsquo;s a nice way of identify if a Jenkins agent comes with access to a Docker daemon or not. Mind you, this stage does not run &lt;strong&gt;in&lt;/strong&gt; in a docker container. It&amp;rsquo;s just a simple process on the agent executing it.&lt;/p&gt;

&lt;p&gt;Also, we ask Jenkins for credentials, under the ID &amp;lsquo;docker-id&amp;rsquo;. Again, this is an identifier I made up myself. It&amp;rsquo;s up the Jenkins administrator to create some credentials to a DockerHub id in the Jenkins instance.&lt;/p&gt;

&lt;p&gt;From there on, it&amp;rsquo;s pretty self-explanatory. We unstash (read: unzip) the created binaries. We use docker build to create an image based on a &lt;code&gt;Dockerfile&lt;/code&gt; in our repository. We tag it using both the build number, and a latest tag. We log in to DockerHub with our credentials, and we push our images.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the Dockerfile;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM microsoft/dotnet:runtime
COPY publish /app
WORKDIR /app
RUN [&amp;quot;chmod&amp;quot;, &amp;quot;744&amp;quot;, &amp;quot;./blog-dotnet-jenkins&amp;quot;] 
ENTRYPOINT [&amp;quot;./blog-dotnet-jenkins&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use the .NET core runtime here; as we don&amp;rsquo;t need the full SDK. We add our &lt;code&gt;publish&lt;/code&gt; folder as &lt;code&gt;/app&lt;/code&gt;, and mark the executable file as such. The &lt;code&gt;ENTRYPOINT&lt;/code&gt; points to the executable file, ensuring its execution when starting the container.&lt;/p&gt;

&lt;p&gt;If we run this pipeline in our Jenkins instance, we have achieved, a fully runnable docker image!&lt;/p&gt;

&lt;p&gt;Success!&lt;/p&gt;

&lt;asciinema-player src=&#34;https://corstijank.github.io/asciinema/dotnet-jenkins-firstrun.json&#34; cols=&#34;90&#34; rows=&#34;10&#34; preload=&#34;true&#34; poster=&#34;npt:0:07&#34;&gt;&lt;/asciinema-player&gt;


&lt;h3 id=&#34;f-ck-it-ship-it&#34;&gt;F*ck it, ship it&lt;/h3&gt;

&lt;p&gt;The final stage really isn&amp;rsquo;t anything special for now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;stage(&#39;Run in production&#39;){
  agent { label &#39;hasDocker&#39; }
  steps{
    sh &amp;quot;docker run -d corstijank/blog-dotnet-jenkins:1.0-${env.BUILD_NUMBER}&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, this is not anywhere near a satisfying production environment. I promise to extend our pipeline to make sure we deploy nicely to separate docker host representing our production server. Or maybe some container service somewhere. At this point, it&amp;rsquo;s all Docker anyway, and that should be the least of my struggles in the coming adventure.&lt;/p&gt;

&lt;h2 id=&#34;deliver-first-develop-later&#34;&gt;Deliver first, develop later&lt;/h2&gt;

&lt;p&gt;So, maybe I went a bit overboard for a simple &lt;code&gt;Hello World&lt;/code&gt; application. I think many developers tend to focus too much first on developing features, instead of delivering features. The whole idea was to test if a .NET core application could be delivered using Jenkins. Never mind the feature yet. For now, it&amp;rsquo;s looking rather glorious. Of course there are going to be add ons and challenges later;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unit testing&lt;/li&gt;
&lt;li&gt;acceptance testing with some kind of database backend&lt;/li&gt;
&lt;li&gt;actual deployment to an actual production environment&lt;/li&gt;
&lt;li&gt;gathering test and deployment results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But honestly, after this experiment I feel confident about using .NET core on Jenkins. And it almost pains me to say it, but Im kind of looking forward into experiment and building this little project. So, definitely to be continued soon.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re curious about the full sources, or just want to peek at the complete picture, you can check out the &lt;a href=&#34;https://github.com/corstijank/blog-dotnet-jenkins&#34;&gt;repository at github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Any questions? Feel free to shoot away below!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>System.out.println(&#34;Hello World&#34;)</title>
      <link>https://corstijank.github.io/post/hello-world/</link>
      <pubDate>Tue, 27 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://corstijank.github.io/post/hello-world/</guid>
      <description>&lt;p&gt;Greetings, dear reader, and welcome to my little corner of the web. It&amp;rsquo;s nearing the end of 2016, and I have decided I want to start my resolution of finally putting up some blogs before 2017 enters with a bang.&lt;/p&gt;

&lt;p&gt;Or, at the very least, have a welcoming blog post up and running. Minimal Viable Product and all. So, with that ,I bid you welcome to &lt;strong&gt;Statics Must Die&lt;/strong&gt;, the ramblings of me, Corstijan Kortsmit.&lt;/p&gt;

&lt;p&gt;About me; I&amp;rsquo;m a software engineer / consultant / beer lover living in the Netherlands. I could go on and on on how I like software, history, good books,  french fries, and so on. But we&amp;rsquo;ll get to all that in due time. For me, this is very much an experiment for 2017. &amp;lsquo;Can I blog?&amp;rsquo;. I know I have the capabilities to write articles, and I have plenty of inspiration. I want to find out if I can motivate myself to do this. To keep writing down interesting thoughts, experiments and generic ramblings, instead of just all keeping them to myself.&lt;/p&gt;

&lt;p&gt;Anyway, for now, what can you expect here? A bunch of posts on interesting ideas I have had for a while now, involving topics like Java, build tooling, Docker and containers, software architecture, agile product ownership and so on. Maybe even a good tutorial on the proper preparation of french fries.&lt;/p&gt;

&lt;p&gt;What can&amp;rsquo;t you expect here? Well for one, as you might guess, &lt;code&gt;static&lt;/code&gt;. Let me promise now, there will be a point in the future, where I will blog on the title. I will explain the evils of &lt;code&gt;static&lt;/code&gt;, and you will see how &lt;code&gt;static&lt;/code&gt; is really the dark side of the force at work.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>